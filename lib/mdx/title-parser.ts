
export interface MarkdownTitleExtractResult {
  title: string;
  sub: MarkdownTitleExtractResult[];
}


/*
 * Generated by GPT4o (2024/05/27)
*/
export function parseMarkdownTitles(markdown: string): MarkdownTitleExtractResult[] {

  const lines = markdown.split('\n').filter(line => line.trim() !== '');

  const titles: MarkdownTitleExtractResult[] = [];

  

  let currentH1: MarkdownTitleExtractResult | null = null;

  let currentH2: MarkdownTitleExtractResult | null = null;

  let currentH3: MarkdownTitleExtractResult | null = null;

  

  lines.forEach(line => {

    line = line.trim();

    const h1Match = line.match(/^# (.*)/);

    const h2Match = line.match(/^## (.*)/);

    const h3Match = line.match(/^### (.*)/);

    const h4Match = line.match(/^#### (.*)/);



    if (h1Match) {

      const title = { title: h1Match[1], sub: [] };

      titles.push(title);

      currentH1 = title;

      currentH2 = null;

      currentH3 = null;

    } else if (h2Match) {

      const title = { title: h2Match[1], sub: [] };

      if (currentH1) {

        currentH1.sub.push(title);

      } else {

        titles.push(title);

      }

      currentH2 = title;

      currentH3 = null;

    } else if (h3Match) {

      const title = { title: h3Match[1], sub: [] };

      if (currentH2) {

        currentH2.sub.push(title);

      } else if (currentH1) {

        currentH1.sub.push(title);

      } else {

        titles.push(title);

      }

      currentH3 = title;

    } else if (h4Match) {

      const title = { title: h4Match[1], sub: [] };

      if (currentH3) {

        currentH3.sub.push(title);

      } else if (currentH2) {

        currentH2.sub.push(title);

      } else if (currentH1) {

        currentH1.sub.push(title);

      } else {

        titles.push(title);

      }

    }

  });



  return titles;

}